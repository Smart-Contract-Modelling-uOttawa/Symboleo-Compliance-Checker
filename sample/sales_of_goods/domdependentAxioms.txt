#---------------------------------------------------------------------------
# Semantics of domain independent predicates 
#---------------------------------------------------------------------------
#  -- c(X)									: X is an instance of a contract
#  -- o(X)									: X is an instance of an obligation
#  -- p(X)									: X is an instance of a power
#  -- role(X)								: X is an instance of a role
#  -- asset(X)								: X is an instance of an asset
#  -- event(X)								: X is an instance of an event
#  -- subcontracted(E, Obls, Cnts, Ps)		: event E subcontracts obligations Obls through subcontracts Cnts to parties Ps respectively
#  -- assignedR(E, Pows, Pold, Pnew)		: event E assigns powers Pows from party Pold to party Pnew
#  -- consented(E1, E2)						: occurrence of event E1 consents occurrence of event E2
#  -- deadline(S, T)						: deadline of situation S is time point T
#  -- bind(R, P)							: bind role R to party P
#  -- associate(X, C)						: associates an obligation/power instance X with an instance of contract C
#  -- debtor(X, P)							: debtor of an obligation/power instance X is party P
#  -- creditor(X, P)						: creditor of an obligation/power instance X is party P
#  -- trigger(X)							: a situation that indicates trigger of an obligation/power instance X
#  -- ant(X)								: a situation that indicates antecedent of an obligation/power instance X
#  -- cons(X)								: a situation that indicates consequent of an obligation/power instance X
#  -- initially(S)							: a situation S is initiated at start time(-1)
#  -- within(E, S)							: a situation S holds when event E happens
#  -- initiates(E, S)						: an event e brings about a situation S
#  -- terminates(E, S)						: an event E terminates a situation S
#  -- happens(E, T)							: an event E happens at time point t
#  -- holds_at(S, T)						: a situation S holds at time point t

#---------------------------------------------------------------------------
# Sales of Goods Contract
#---------------------------------------------------------------------------
## Domain
	role(buyer).
	role(seller).
	
	asset(X) 					:- perishableGood(X).
	perishableGood(X) 			:- meat(X).
	
	event(X) 					:- paid(X).
	event(X) 					:- paidLate(X).
	event(X) 					:- disclosed(X).
	event(X) 					:- delivered(X).

## Declarations
	c(X) 						:- initially(meatSale(X, _, _, _, _, _)).
	
	initially(bind(buyer, X)) 	:- initially(meatSale(_, X, _, _, _, _)).
	initially(bind(seller, X)) 	:- initially(meatSale(_, _, X, _, _, _)).
	deliveryDueDate(X) 			:- initially(meatSale(_, _, _, _, X, _)).
	paymentDueDate(X) 			:- initially(meatSale(_, _, _, _, _, X)).
	meat(X) 					:- initially(meatSale(_, _, _, X, _, _)).
	
	delivered(E) 				:- o1(O), within(E, performer(O, X)), happens(E, T), holds_at(type(E, delivered), T), holds_at(from(E, X), T), holds_at(item(E, meatPacked), T), holds_at(deliveryAddress(E, saintLaurent), T), holds_at(quality(meatPacked, aaa), T).
	paid(E)						:- o2(O), within(E, performer(O, X)), within(E, rightHolder(O, Y)), happens(E, T), holds_at(type(E, paid), T), holds_at(from(E, X), T), holds_at(to(E, Y), T), holds_at(amount(E, 1000), T).
	paidLate(E) 				:- o3(O), within(E, performer(O, X)), within(E, rightHolder(O, Y)), happens(E, T), holds_at(type(E, paidLate), T), holds_at(from(E, X), T), holds_at(to(E, Y), T), holds_at(amount(E, 1100), T).
	disclosedSeller(E) 			:- so1(O), within(E, performer(O, X)), happens(E, T), holds_at(type(E, sellerDisclosed), T), holds_at(from(E, X), T).
	disclosedBuyer(E) 			:- so2(O), within(E, performer(O, X)), happens(E, T), holds_at(type(E, buyerDisclosed), T), holds_at(from(E, X), T).	
		
## Contract
	initially(form(X)) 			:- initially(meatSale(X, _, _, _, _, _)).
	
	#---------------------------------------------------------------------------
	# Obligations
	#---------------------------------------------------------------------------
	## define unconditional delivery obligation(i.e., oDel) as an instance of obligation 'o1'.
	o(X) :- o1(X).
	o1(oDel).
	associate(oDel, cArgToCan).
	
	initially(debtor(X, P)) 		:- o1(X), initially(bind(seller, P)).
	initially(creditor(X, P)) 		:- o1(X), initially(bind(buyer, P)).
	
	initiates(E, trigger(oDel)) 	:- happens(E, _), initiates(E, inEffect(cArgToCan)). 
	ant(oDel) 						:- true.	
	initiates(E, cons(oDel)) 		:- happens(E, T), delivered(E), deliveryDueDate(T1), T<T1.
	deadline(cons(oDel), Td) 		:- deliveryDueDate(Td).
	# assume delivery due date is 10
	happens(deliveryDuePassed, 10).
	
	## define unconditional payment obligation(i.e., oPay) as an instance of obligation 'o2'.
	o(X) 							:- o2(X).
	o2(oPay).
	associate(oPay, cArgToCan).
	
	initially(debtor(X, P)) 		:- o2(X), initially(bind(buyer, P)).
	initially(creditor(X, P)) 		:- o2(X), initially(bind(seller, P)).
	
	initiates(E, trigger(oPay))		:- happens(E, _), initiates(E, inEffect(cArgToCan)). 
	ant(oPay) :- true.	
	initiates(E, cons(oPay)) 		:- happens(E, T), paid(E), paymentDueDate(Tp), T<Tp.
	deadline(cons(oPay), Tp) 		:- paymentDueDate(Tp).
	# assume payment due date is 7
	happens(paymentDueDate, 7).
	
	## define unconditional late payment obligation(i.e., oLpay) as an instance of obligation 'o3'.
	o(X) 							:- o3(X).
	o3(oLpay).
	associate(oLpay, cArgToCan).
	
	initially(debtor(X, P)) 		:- o3(X), initially(bind(buyer, P)).
	initially(creditor(X, P)) 		:- o3(X), initially(bind(seller, P)).
	
	ant(oLpay)			 			:- true.
	initiates(E, trigger(oLpay)) 	:- happens(E, _), initiates(E, violation(oPay)).
	initiates(E, cons(oLpay)) 		:- happens(E, T), paidLate(E).
	# assume late payment due date is 100
	happens(paymentDueDate, 100).
		
	#---------------------------------------------------------------------------
	# Powers
	#---------------------------------------------------------------------------
	## define unconditional delivery suspension power(i.e., pSusDelivery) as an instance of 'p1'.
	p(X) 												:- p1(X).
	p1(pSusDelivery).
	associate(pSusDelivery, cArgToCan). 
	
	initially(debtor(X, P)) 							:- p1(X), initially(bind(buyer, P)).
	initially(creditor(X, P)) 							:- p1(X), initially(bind(seller, P)).
	
	ant(pSusDelivery) 									:- true.
	suspension(oDel) 									:- cons(pSusDelivery).
	initiates(E, trigger(pSusDelivery)) 				:- happens(E, _), initiates(E, violation(oPay)).
	happens(exerted(pSusDelivery), T) 					:- happens(suspended(oDel), T).
	
	## define unconditional delivery resumption power(i.e., pResDelivery) as an instance of 'p2'.
	p(X) 												:- p2(X).
	p2(pResDelivery).
	associate(pResDelivery, cArgToCan). 
	
	initially(debtor(X, P)) 							:- p2(X), initially(bind(seller, P)).
	initially(creditor(X, P)) 							:- p2(X), initially(bind(buyer, P)).
	
	ant(pResDelivery) 									:- true.
	resumption(oDel) 									:- cons(pResDelivery).
	initiates(E, trigger(pResDelivery)) 				:- happens(E, _), paidLate(E), within(E, suspension(oDel)).
	happens(exerted(pResDelivery), T) 					:- happens(resumed(oDel), T).
	
	## define unconditional contract termination power(i.e., pTermContract) as an instance of 'p3'.
	p(X) 												:- p3(X).
	p3(pTermContract).
	associate(pTermContract, cArgToCan). 
	
	initially(debtor(X, P)) 							:- p3(X), initially(bind(seller, P)).
	initially(creditor(X, P)) 							:- p3(X), initially(bind(buyer, P)).
	
	ant(pTermContract) 									:- true.
	unsuccessfulTermination(cArgToCan) 					:- cons(pTermContract).
	happens(passedDelDue, 20).
	initiates(passedDelDue, trigger(pTermContract)) 	:- \+(happens(E, T1), delivered(E)), happens(passedDelDue, T2).
	happens(exerted(pTermContract), T) 					:- happens(terminated(cArgToCan), T).

	#---------------------------------------------------------------------------
	# Surviving Obligations
	#---------------------------------------------------------------------------
	## define unconditional surviving obligation(i.e., soSellerDisclosure) as an instance of 'so1'.
	so(X) 												:- so1(X).
	so1(soSellerDisclosure).
	associate(soSellerDisclosure, cArgToCan). 
	
	initially(debtor(X, P)) 							:- so1(X), initially(bind(seller, P)).
	initially(creditor(X, P)) 							:- so1(X), initially(bind(buyer, P)).
	
	ant(soSellerDisclosure) 							:- true.
	deadline(cons(soSellerDisclosure), 180).
	initiates(E, trigger(soSellerDisclosure)) 			:- happens(E, _), initiates(E, inEffect(cArgToCan)).
	happens(passedConfDue, 180).
	initiates(passedConfDue, cons(soSellerDisclosure)) 	:- \+(happens(E, T1), disclosedSeller(E)), happens(passedConfDue, T2).
	
	## define unconditional surviving obligation(i.e., soBuyerDisclosure) as an instance of 'so2'.
	so(X) 												:- so2(X).
	so2(soBuyerDisclosure).	
	associate(soBuyerDisclosure, cArgToCan). 
	
	initially(debtor(X, P)) 							:- so2(X), initially(bind(buyer, P)).
	initially(creditor(X, P)) 							:- so2(X), initially(bind(seller, P)).
	
	ant(soBuyerDisclosure) 								:- true.
	deadline(cons(soBuyerDisclosure), 180).
	initiates(E, trigger(soBuyerDisclosure)) 			:- happens(E, _), initiates(E, inEffect(cArgToCan)).
	happens(passedConfDue, 180).
	initiates(passedConfDue, cons(soBuyerDisclosure)) 	:- \+(happens(E, T1), disclosedBuyer(E)), happens(passedConfDue, T2).